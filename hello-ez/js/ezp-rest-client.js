YUI.add('ezp-rest-client', function (Y) {

    Y.RestClient = Y.Base.create("ezpRestClient", Y.Model, [], {

        /*
         * Does not work in CORS context because Chrome and Firefox
         * does not follow the 303 redirection generated by /user/sessions
         * when the user already has a session...
         * TODO: report issue in browsers trackers
         */
        /*
        login: function (callback, errback) {
            var headers, body;

            headers = {
                'Accept': 'application/vnd.ez.api.Session+json',
                'Content-Type': 'application/vnd.ez.api.SessionInput+json'
            };
            body = {
                'SessionInput': {
                    'login': this.get('login'),
                    'password': this.get('password')
                }
            };

            this.POST(
                '/user/sessions', headers, Y.JSON.stringify(body),
                function (xhr) {
                    var struct = Y.JSON.parse(xhr.responseText);

                    this.set('sessionName', struct.Session.name);
                    this.set('sessionId', struct.Session.identifier);
                    this.set('csrfToken', struct.Session.csrfToken);
                    if ( callback ) {
                        callback.call(this, xhr);
                    }
                },
                function (xhr) {
                    if ( errback ) {
                        errback.call(this, xhr);
                    }
                }
            );
        },
        */

        GET: function (uri, headers, callback, errback) {
            this._doRequest('GET', uri, headers, null, callback, errback);
        },

        POST: function (uri, headers, body, callback, errback) {
            this._doRequest('POST', uri, headers, body, callback, errback);
        },

        PUBLISH: function (uri, headers, body, callback, errback) {
            this._doRequest('PUBLISH', uri, headers, body, callback, errback);
        },

        _doRequest: function(method, uri, headers, body, callback, errback) {
            if ( !headers.Accept ) {
                headers.Accept = 'application/json';
            }
            headers.Authorization = this._getAuthorizationHeader();
            Y.io(this._buildUri(uri), {
                method: method,
                data: body,
                headers: headers,
                on: {
                    success: function (id, xhr) {
                        if ( callback ) {
                            callback.call(this, xhr);
                        }
                    },
                    failure: function (id, xhr) {
                        if ( errback ) {
                            errback.call(this, xhr);
                        }
                    }
                },
                context: this,
                xdr: {
                    use: 'native',
                    credentials: true
                },
                timeout: this.get('timeout')
            });
        },

        _getAuthorizationHeader: function () {
            return "Basic " + Y.Base64.encode(
                this.get('login') + ':' + this.get('password')
            );
        },

        _buildUri: function (uri) {
            return this.get('restUrl').replace(/\/+$/, '') + '/' + uri.replace(/^\/+/, '');
        }
    }, {
        ATTRS: {
            url: {
                restUrl: {
                    value: null
                },
                login: {
                    value: null
                },
                password: {
                    value: null
                },
                timeout: {
                    value: 1000
                }
            }
        }
    });
});
